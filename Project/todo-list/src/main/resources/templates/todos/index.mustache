{{>layouts/header}}

<table class="table">
    <thead>
    <tr>
        <!-- 나중에 Id는 보이지 않게 수정할 것 -->
        <th scope="col">Id</th>
        <th scope="col">작업</th>
        <th scope="col">상태 표시</th>
        <th scope="col">상태 변경</th>
    </tr>
    </thead>
    <tbody>
    {{#todoList}}
        <tr>
            <th>{{id}}</th>
            <td>{{title}}</td>
            <!-- 나중에 상태는 안보이게 라디오버튼으로 대체 할 것 -->
            <td>{{status}}</td>
            <td>
                <div class="btn-group" role="group">
                    <button class="btn btn-outline-primary status-btn {{#isReady}}active{{/isReady}}" data-id="{{id}}" data-status="준비">준비</button>
                    <button class="btn btn-outline-warning status-btn {{#isProceed}}active{{/isProceed}}" data-id="{{id}}" data-status="진행중">진행중</button>
                    <button class="btn btn-outline-danger status-btn {{#isStop}}active{{/isStop}}" data-id="{{id}}" data-status="중단됨">중단됨</button>
                    <button class="btn btn-outline-success status-btn {{#isCompleted}}active{{/isCompleted}}" data-id="{{id}}" data-status="완료">완료</button>
                </div>
            </td>

        </tr>
    {{/todoList}}
    </tbody>
</table>

<div class="card m-2" id="todo-new">
    <div class="card-body">
        <!-- 할일 추가 폼 -->
        <form action="/todos/add" method="post">
            <div class="mb-3">
                <label for="new-task" class="form-label">작업이름</label>
                <input type="text" class="form-control" id="new-task" name="title">
            </div>

            <button type="submit" class="btn btn-primary" id="task-add-btn">작업 추가</button>
        </form>
    </div>
</div>

<script>
    // {
    //     document.addEventListener("DOMContentLoaded", function() {
    //         // 모든 작업 항목을 반복하여 상태를 반영
    //         const todoItems = document.querySelectorAll("tr");
    //         todoItems.forEach(function(row) {
    //             const statusCell = row.querySelector("td:nth-child(3)"); // 상태 표시 셀
    //             const status = statusCell.textContent.trim(); // 상태 텍스트 가져오기
    //
    //             // 각 상태에 맞는 라디오 버튼을 checked 처리
    //             const radioGroup = row.querySelector('.btn-group');
    //             if (status === "준비") {
    //                 radioGroup.querySelector("#ready-" + row.querySelector("th").textContent).checked = true;
    //             } else if (status === "진행중") {
    //                 radioGroup.querySelector("#proceed-" + row.querySelector("th").textContent).checked = true;
    //             } else if (status === "중단됨") {
    //                 radioGroup.querySelector("#stop-" + row.querySelector("th").textContent).checked = true;
    //             } else if (status === "완료") {
    //                 radioGroup.querySelector("#completed-" + row.querySelector("th").textContent).checked = true;
    //             }
    //         });
    //     });
    //
    // }

    {
        document.addEventListener("DOMContentLoaded", function() {
            const statusButtons = document.querySelectorAll(".status-btn");

            statusButtons.forEach(button => {
                button.addEventListener("click", function() {
                    const taskId = this.getAttribute("data-id"); // 버튼의 data-id 값 가져오기
                    const newStatus = this.getAttribute("data-status"); // 버튼의 data-status 값 가져오기

                    console.log(`ID ${taskId}의 작업 상태가 ${newStatus}로 변경됩니다.`);

                    const task = {
                        id: taskId,
                        status: newStatus
                    };

                    const url = `/api/todos/updateStatus/${taskId}`;
                    fetch(url, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(task)
                    }).then(response => {
                        if (response.ok) {
                            //alert("상태 변경 완료!");
                            window.location.reload(); // 변경된 상태를 반영하기 위해 새로고침
                        } else {
                            alert("상태 변경 실패!");
                        }
                    });
                });
            });
        });

    }
</script>

{{>layouts/footer}}